objects = {}

CATEGORY = ""
NAME = ""
function onLoad(save_state)
    local data = {input_function = "set_category", function_owner = self, label = "Base category", position = {-0.8, 0.1, -0.9}, scale = {0.5, 0.5, 0.5}, width = 1500, height = 130, tooltip = "Base category", alignment = 3, validation = 6, tooltip="Base category for this faction (ex. Factions, scenarios or fan factions)"}
    self.createInput(data)
    local data = {input_function = "set_name", function_owner = self, label = "Name", position = {0.8, 0.1, -0.9}, scale = {0.5, 0.5, 0.5}, width = 1500, height = 130, tooltip = "Name", alignment = 3, validation = 6, tooltip="Name for this faction (ex. Eyrie, Woodland or Trickster)"}
    self.createInput(data)
end

function set_category(obj, player_clicker_color, input_value, selected)
    CATEGORY = input_value
end

function set_name(obj, player_clicker_color, input_value, selected)
    NAME = input_value
end

function spawn_here(to_spawn)
    my_pos = self.getPosition()
    my_rot = self.getRotation()
    -- self.destruct()
    for _,v in ipairs(to_spawn) do
        local x = v.distance*math.sin(v.heading+(math.rad(my_rot.y)-math.pi)) + my_pos.x;
        local z = v.distance*math.cos(v.heading+(math.rad(my_rot.y)-math.pi)) + my_pos.z;
        local new_pos = {x, v.own_y, z}
        spawnObjectJSON({
            json              = v.json,
            position          = new_pos,
            callback_function = function(o) o.setRotation({o.getRotation().x, o.getRotation().y+my_rot.y+180, o.getRotation().z}) end
        })
    end
end

function empty()
    local items = Physics.cast({
        origin       = self.getPosition()+Vector(0,0.1,0),
        direction    = {0,1,0},
        type         = 3,
        size         = self.getBoundsNormalized().size,
        max_distance = 1,
        debug        = false
    }) -- returns {{Vector point, Vector normal, float distance, Object hit_object}, ...}
    for _, item in ipairs(items) do
        if item.hit_object ~= self and item.hit_object.tag ~= "Surface" then
            item.hit_object.destruct()
        end
    end
end

function saveHere()
    my_pos = self.getPosition()
    objs = Physics.cast({
        origin       = self.getPosition(),
        type         = 3,
        size         = self.getBoundsNormalized().size,
        direction = {0,1,0},
        max_distance = 0.5,
        debug        = true,
    })
    for _, v in ipairs(objs) do
        ob = v.hit_object
        if not (ob == self) and not (ob.tag=="Surface") and not (ob.tag=="Board") then
            ob_pos = ob.getPosition()
            distance = math.sqrt(((my_pos.x-ob_pos.x)^2+((my_pos.z-ob_pos.z)^2)))
            heading = math.atan2(ob_pos.x-my_pos.x, ob_pos.z-my_pos.z)
            if (heading < 0) then heading = 2*math.pi+heading end
            objects[#objects+1] = {distance=distance, heading=heading, json=ob.getJSON():gsub("%\r%\n%s+", ""), own_y=ob_pos.y}
        end
    end
    local body = "{\n"
    for _,ob in ipairs(objects) do
        body = body.."{distance="..ob.distance..", "
        body = body.."heading="..ob.heading..", "
        body = body.."own_y="..ob.own_y..", "
        body = body.."json=[["..ob.json.."]]},\n"
    end
    body = body.."}"
    -- Notes.addNotebookTab({
    --     title = "Save",
    --     body  = body,
    --     color = "Black",
    -- })
    function callback(wr)
        repeat
            print("not done")
        until wr.is_done
        print(wr.text)
    end
    WebRequest.post("https://pastecode.xyz/api/create", {text=body, title="Test", name="Test", private=1, lang="lua", expire=10}, callback)
    objects = {}
end
