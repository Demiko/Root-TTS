available = {
        Marquise = 1,
        Eyrie = 1,
        Woodland = 1,
        Vagabond = 2,
        Riverfolk = 1,
        Lizard = 1,
        Duchy = 1,
        Corvid = 1,
        Fangus = 1,
        VagaThief = 1,
        VagaTinker = 1,
        VagaScoundrel = 1,
        VagaArbiter = 1,
        VagaRanger = 1,
        VagaVagrant = 1,
        VagaAdventurer = 1,
        VagaHarrier = 1,
        VagaRonin = 1,
        Arachnid = 1,
        WeeklyCroak = 1,
        Boars = 1,
        Aviators = 1,
}

colors = {Blue=true, Orange=true, Teal=true, Yellow=true, Green=true,
          Purple=true, White=true, Red=true, Brown=true, Pink=true}

factionboards = {}
bot = false
XML_UPDATED = false
-- par = {factionboard instance}
function ImHere(par)
    factionboards[#factionboards+1] = par[1]
end

-- par = {factionboard instance}
function ImGone(par)
    local where = 0
    for x=1, #factionboards do
        if factionboards[x] == par[1] then
            where = x
        end
    end
    table.remove(factionboards, where)
end

-- par = {faction}
function FactionChosen(par)
    local faction = par[1]
    available[faction] = available[faction] -1
    ShowAllButtons()
end

function ShowAllButtons()
    for _, x in ipairs(factionboards) do
        x.call('showButtons', {})
    end
end

function update_faction_data()
    local TEXT = ""
    log("Global: Finding keeper of faction info")
    KEEPER = find_object_by_name("The keeper of information")
    log("Requesting latest Faction data")
    function transfer()
        TMP = find_object_by_name("TMP")
        local everything = TMP.getTable("EVERYTHING")
        KEEPER.setTable("EVERYTHING", everything)
        log("Newest data received")
        TMP.destruct()
        AVAILABLE = {Vagabond=2}
        for faction, _ in pairs(everything.factions) do
            AVAILABLE[faction] = 1
        end
        for faction, _ in pairs(everything.fanfactions) do
            AVAILABLE[faction] = 1
        end
        print(logString(AVAILABLE))
    end
    function spawned(o)
        o.setLock(true)
        o.setLuaScript(TEXT)
        o.setName("TMP")
        o.reload()
        Wait.condition(transfer,||not o.spawning)
    end
    function callback(wr)
        repeat
            --
        until  wr.is_done
        if wr.is_error then
            log("Something went wrong retreiving newest data")
            log(wr.error)
        else
            log("Faction Data received.")
            TEXT = wr.text
            local TMP = spawnObject({type='backgammon_piece_white', position={5.00, -24.22, 0.00}, sound=false, callback_function=spawned})
        end
    end
    WebRequest.get("https://raw.githubusercontent.com/McChew/Root-TTS/master/root/factionsv3.ttslua", callback)
end

function update_xml_data()
    log("Global: Finding keeper of XML")
    XMLKEEPER = find_object_by_name("The keeper of XML")
    log("Requesting latest XML data")
    function callback(wr)
        repeat
            --
        until  wr.is_done
        if wr.is_error then
            log("Something went wrong retreiving XMLa")
            log(wr.error)
        else
            log("XML Data received.")
            XMLKEEPER.setLuaScript(wr.text)
            XMLKEEPER.reload()
            XML_UPDATED = true
        end
    end
    WebRequest.get("https://raw.githubusercontent.com/McChew/Root-TTS/master/root/factionboardxml.ttslua", callback)
end

function onLoad(save_state)
    update_xml_data()
    update_faction_data()
end

function find_object_by_name(name)
    for _, obj in ipairs(getAllObjects()) do
        if obj.getName() == name then return obj end
    end
    return nil
end
